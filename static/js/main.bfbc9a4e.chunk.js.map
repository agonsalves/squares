{"version":3,"sources":["utils.js","Square.js","Elements.js","App.js","serviceWorker.js","index.js"],"names":["coinFlip","Math","floor","random","SquareFrame","styled","div","dimensions","size","SquareContainer","animated","Worm","colors","getRandomDelay","base","Square","duration","useState","randomColors","setRandomColors","backgroundColor","setBackgroundColor","wormColor","setWormColor","useEffect","array","randomIndex","currentIndex","length","shuffle","startBottom","y","immediate","startRight","x","startLeft","enterFromTop","delay","enterFromBottom","enterFromRight","enterFromLeft","middleFromTop","middleFromBottom","middleFromSide","upFromMiddle","downFromMiddle","rightFromMiddle","leftFromMiddle","exitTop","exitBottom","exitRight","exitLeft","performAtMiddle","color","indexOf","animateWorm","useCallback","animate","a","useSpring","from","config","precision","easing","loop","to","style","Container","App","Array","keys","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bfbc9a4e.chunk.js","sourcesContent":["export const coinFlip = () => !!Math.floor(Math.random() * 2)","import React, {\r\n    useCallback,\r\n    useEffect,\r\n    useState\r\n}                 from 'react'\r\nimport {\r\n    animated,\r\n    useSpring\r\n}                 from 'react-spring'\r\nimport {coinFlip} from './utils'\r\nimport styled     from 'styled-components'\r\n\r\nexport const SquareFrame = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(${({dimensions}) => dimensions}, 1fr);\r\n  grid-template-rows: repeat(${({dimensions}) => dimensions}, 1fr);\r\n  width: ${({dimensions, size}) => dimensions * size}px;\r\n  height: ${({dimensions, size}) => dimensions * size}px;\r\n`\r\n\r\nconst SquareContainer = styled(animated.div)`\r\n  width: ${({size}) => size}px;\r\n  height: ${({size}) => size}px;\r\n  overflow: hidden;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  position: relative;\r\n`\r\n\r\nconst Worm = styled(animated.div)`\r\n  border-radius: ${({size}) => size}px;\r\n  height: ${({size}) => size * 3}px;\r\n  width: ${({size}) => size}px;\r\n  margin-bottom: ${({size}) => size}px;\r\n  position: absolute;\r\n  right: 0;\r\n  bottom: 0;\r\n\r\n  &:after {\r\n    content: '';\r\n    display: block;\r\n    border-radius: ${({size}) => size}px;\r\n    height: ${({size}) => size}px;\r\n    width: ${({size}) => size * 3}px;\r\n    background-color: inherit;\r\n    position: absolute;\r\n    right: -${({size}) => size}px;\r\n    bottom: ${({size}) => size}px;\r\n  }\r\n`\r\n\r\nconst colors = [\r\n    '#341d6f',\r\n    '#5c38b3',\r\n    '#9d8adc',\r\n    '#c1baec',\r\n    '#0925b6',\r\n    '#1c3ece',\r\n    '#4259f1',\r\n    '#869ce5',\r\n    '#c8d0ff',\r\n]\r\n\r\nfunction shuffle(array) {\r\n    let currentIndex = array.length, randomIndex;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n\r\n        // Pick a remaining element...\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex--;\r\n\r\n        // And swap it with the current element.\r\n        [array[currentIndex], array[randomIndex]] = [\r\n            array[randomIndex], array[currentIndex]];\r\n    }\r\n\r\n    return array;\r\n}\r\n\r\nconst getRandomDelay = (base = 0) => (Math.floor(Math.random() * (30 - base)) + base) * 100\r\n\r\nconst Square = ({size, duration}) => {\r\n    const [randomColors, setRandomColors] = useState([])\r\n    const [backgroundColor, setBackgroundColor] = useState('')\r\n    const [wormColor, setWormColor] = useState('')\r\n\r\n    const isConstant = true\r\n    const isDown = true\r\n\r\n    useEffect(() => {\r\n        const randomColors = shuffle(colors)\r\n        setRandomColors(randomColors)\r\n        setBackgroundColor(randomColors[0])\r\n        setWormColor(randomColors[1])\r\n    }, [])\r\n\r\n    const startBottom = {\r\n        y: size * 4,\r\n        immediate: true\r\n    }\r\n\r\n    const startRight = {\r\n        y: size * 2,\r\n        x: size * 2,\r\n        immediate: true\r\n    }\r\n\r\n    const startLeft = {\r\n        y: size * 2,\r\n        x: size * -2,\r\n        immediate: true\r\n    }\r\n\r\n    const enterFromTop = (delay = 10) => ({\r\n        y: size,\r\n        delay: getRandomDelay(delay)\r\n    })\r\n\r\n    const enterFromBottom = (delay = 10) => ({\r\n        y: size * 3,\r\n        delay: getRandomDelay(delay)\r\n    })\r\n\r\n    const enterFromRight = (delay = 10) => ({\r\n        x: size,\r\n        delay: getRandomDelay(delay)\r\n    })\r\n\r\n    const enterFromLeft = (delay = 10) => ({\r\n        x: size * -1,\r\n        delay: getRandomDelay(delay)\r\n    })\r\n\r\n    const middleFromTop = (delay = 0) => ({\r\n        y: size * 2,\r\n        delay: getRandomDelay(delay)\r\n    })\r\n\r\n    const middleFromBottom = (delay = 0) => ({\r\n        y: size * 2,\r\n        delay: getRandomDelay(delay)\r\n    })\r\n\r\n    const middleFromSide = (delay = 0) => ({\r\n        x: 0,\r\n        delay: getRandomDelay(delay)\r\n    })\r\n\r\n    const upFromMiddle = (delay = 0) => ({\r\n        y: size * 1,\r\n        delay: getRandomDelay(delay)\r\n    })\r\n\r\n    const downFromMiddle = (delay = 0) => ({\r\n        y: size * 3,\r\n        delay: getRandomDelay(delay)\r\n    })\r\n\r\n    const rightFromMiddle = (delay = 0) => ({\r\n        x: size,\r\n        delay: getRandomDelay(delay)\r\n    })\r\n\r\n    const leftFromMiddle = (delay = 0) => ({\r\n        x: size * -1,\r\n        delay: getRandomDelay(delay)\r\n    })\r\n\r\n    const exitTop = (delay = 0) => ({\r\n        y: size * 0,\r\n        delay: getRandomDelay(delay)\r\n    })\r\n\r\n    const exitBottom = (delay = 0) => ({\r\n        y: size * 4,\r\n        delay: getRandomDelay(delay)\r\n    })\r\n\r\n    const exitRight = (delay = 0) => ({\r\n        x: size * 2,\r\n        delay: getRandomDelay(delay)\r\n    })\r\n\r\n    const exitLeft = (delay = 0) => ({\r\n        x: size * -2,\r\n        delay: getRandomDelay(delay)\r\n    })\r\n\r\n    const performAtMiddle = () => setBackgroundColor(color => randomColors[(randomColors.indexOf(color) + 2) % randomColors.length])\r\n\r\n    const performAtEnd = () => setWormColor(color => randomColors[(randomColors.indexOf(color) + 2) % randomColors.length])\r\n\r\n    const animateWorm = useCallback(async animate => {\r\n\r\n        if (coinFlip() || isDown) {\r\n            // start top or bottom\r\n            if (coinFlip() || isDown) {\r\n                !isConstant && await animate(enterFromTop())\r\n                await animate(middleFromTop())\r\n                performAtMiddle()\r\n                !isConstant && await animate(downFromMiddle())\r\n                await animate(exitBottom())\r\n            } else {\r\n                await animate(startBottom)\r\n                !isConstant && await animate(enterFromBottom())\r\n                await animate(middleFromBottom())\r\n                performAtMiddle()\r\n                !isConstant && await animate(upFromMiddle())\r\n                await animate(exitTop())\r\n            }\r\n        } else {\r\n            // start right or left\r\n            if (coinFlip()) {\r\n                await animate(startRight)\r\n                !isConstant && await animate(enterFromRight())\r\n                await animate(middleFromSide())\r\n                performAtMiddle()\r\n                !isConstant && await animate(leftFromMiddle())\r\n                await animate(exitLeft())\r\n            } else {\r\n                await animate(startLeft)\r\n                !isConstant && await animate(enterFromLeft())\r\n                await animate(middleFromSide())\r\n                performAtMiddle()\r\n                !isConstant && await animate(rightFromMiddle())\r\n                await animate(exitRight())\r\n            }\r\n        }\r\n\r\n\r\n        performAtEnd()\r\n    }, [randomColors, size])\r\n\r\n    const {y, x} = useSpring({\r\n        from: {\r\n            y: 0,\r\n            x: 0,\r\n            immediate: true\r\n        },\r\n        config: {\r\n            duration,\r\n            precision: .05,\r\n            easing: x => isConstant ? x : Math.sin((x * Math.PI) / 2)\r\n        },\r\n        loop: true,\r\n        to: animateWorm\r\n    })\r\n\r\n    return (\r\n        <SquareContainer style={{backgroundColor}} size={size}>\r\n            <Worm style={{backgroundColor: wormColor, y, x}} size={size}/>\r\n        </SquareContainer>\r\n    )\r\n}\r\n\r\nexport default Square","import styled from 'styled-components'\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  min-height: 100vh;\r\n`","import React                 from 'react'\r\nimport Square, {SquareFrame} from './Square'\r\nimport {Container}           from './Elements'\r\n\r\n\r\nconst App = () => {\r\n    const size = 80\r\n    const dimensions = 12\r\n    const duration = 500\r\n\r\n    return (\r\n        <Container>\r\n            <SquareFrame dimensions={dimensions} size={size}>\r\n                {[...Array(dimensions * dimensions).keys()].map(key =>\r\n                    <Square\r\n                        size={size}\r\n                        key={key}\r\n                        duration={duration}\r\n                    />\r\n                )}\r\n            </SquareFrame>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React              from 'react'\r\nimport ReactDOM           from 'react-dom'\r\nimport App                from './App'\r\nimport './index.css'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}